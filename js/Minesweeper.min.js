import Cell from"./Cell.js";import BombCounter from"./BombCounter.js";import Smile from"./Smile.js";import Timer from"./Timer.js";class Minesweeper{constructor(target,width,height,bombsPercentage){this.target=target,this.DOM=null,this.DOMfield=null,this.width=width,this.height=height,this.bombsPercentage=bombsPercentage,this.bombsCount=1,this.canPlay=!0,this.clickCount=0,this.bombCounter=null,this.smile=null,this.timer=null,this.cells=[],this.init()}init(){this.validate(),this.render()}resetGame(){this.canPlay=!0,this.clickCount=0,this.cells=[],this.render()}validate(){const DOM=document.querySelector(this.target);if(!DOM)throw"Kritine klaida, reikia nurodyti tinkama selectoriu kur generuoti zaidima!";if(this.DOM=DOM,"number"!=typeof this.width||this.width<1||this.width%1>0)throw"Netinkamas plotis!";if("number"!=typeof this.height||this.height<1||this.height%1>0)throw"Netinkamas aukstis!";if(this.width*this.height<2)throw"Bendras lentos plotas yra per mazas.";if("number"!=typeof this.bombsPercentage||this.bombsPercentage<=0||this.bombsPercentage>=100)throw"Netinkamas bombu kiekis!";const bombsCount=Math.floor(this.width*this.height*this.bombsPercentage/100);bombsCount>0&&(this.bombsCount=bombsCount)}render(){let HTML='<div class="header"></div>\n                    <div class="field"></div>';this.DOM.classList.add("minesweeper"),this.DOM.innerHTML=HTML,this.DOMheader=this.DOM.querySelector(".header"),this.DOMfield=this.DOM.querySelector(".field"),this.bombCounter=new BombCounter(this.DOMheader,this.bombsCount),this.smile=new Smile(this.DOMheader,this),this.timer=new Timer(this.DOMheader);for(let i=0;i<this.width*this.height;i++){const x=i%this.width,y=(i-x)/this.width;this.cells.push(new Cell(i,x,y,this))}}createBombs(cellIndex){let list=[];for(;list.length<this.bombsCount;){const position=Math.floor(Math.random()*this.width*this.height);-1===list.indexOf(position)&&position!==cellIndex&&(list.push(position),this.cells[position].addBomb())}}checkCell(cellIndex){if(this.canPlay)if(console.log("cell: "+cellIndex),0===this.clickCount&&this.createBombs(cellIndex),this.clickCount++,this.cells[cellIndex].hasBomb)this.gameOver();else{const surroundingBombs=this.calcSurroundingBombs(cellIndex);0===surroundingBombs||this.cells[cellIndex].showNumber(surroundingBombs)}}calcSurroundingBombs(cellIndex){let count=0;const currentCell=this.cells[cellIndex],x=currentCell.x,y=currentCell.y;return x>0&&y>0&&this.cells[cellIndex-this.width-1].hasBomb&&count++,y>0&&this.cells[cellIndex-this.width].hasBomb&&count++,x<this.width-1&&y>0&&this.cells[cellIndex-this.width+1].hasBomb&&count++,x>0&&this.cells[cellIndex-1].hasBomb&&count++,x<this.width-1&&this.cells[cellIndex+1].hasBomb&&count++,x>0&&y<this.height-1&&this.cells[cellIndex+this.width-1].hasBomb&&count++,y<this.height-1&&this.cells[cellIndex+this.width].hasBomb&&count++,x<this.width-1&&y<this.height-1&&this.cells[cellIndex+this.width+1].hasBomb&&count++,count}gameOver(){this.canPlay=!1,this.smile.sad(),console.log("GAME OVER...")}}const game=new Minesweeper("#game",10,10,15);console.log(game);